AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  ProjectName:
    Type: String
    
  ProjectHash:
    Type: String
    
  Environment:
    Type: String
    Default: dev
    
Mappings:
  URLs:
#    prod:
#      root: mckayhear.es
#      domain: dev.mckayhear.es
#      zoneId: Z2BASL1172N9HA
#      s3endpoint: s3-website-ap-southeast-2.amazonaws.com
#      s3zoneId: Z1WCIGYICN2BYD
    dev:
      domain: dev.mckayhear.es
      apidomain: devapi.mckayhear.es
      root: mckayhear.es
      zoneId: Z2BASL1172N9HA
      s3endpoint: s3-website-ap-southeast-2.amazonaws.com
      s3zoneId: Z1WCIGYICN2BYD\
      sslcert: arn:aws:acm:us-east-1:115136208505:certificate/d2ec0f01-f114-4d0b-ac04-c6ece55d0048

Resources:
  StaticSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !FindInMap ["URLs", !Ref Environment, domain]
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  StaticSitePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource:
              - !Sub ${StaticSiteBucket.Arn}/*
      Bucket: !Ref StaticSiteBucket

  StaticSiteRecordSets:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Forward to Environment
      HostedZoneName: !Sub
        - ${bucket}.
        - bucket: !FindInMap ["URLs", !Ref Environment, root]
      RecordSets:
        - Name: !Sub
            - ${bucket}.
            - bucket: !FindInMap ["URLs", !Ref Environment, domain]
          Type: A
          AliasTarget:
            HostedZoneId: !FindInMap ["URLs", !Ref Environment, s3zoneId]
            DNSName: !FindInMap ["URLs", !Ref Environment, s3endpoint]
    # Static site
    # Game Code
    # Lambda API

  LambdaApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-backend-api
      Runtime: python3.7
      Handler: index.handler
      InlineCode: |
        def handler(_, __):
          return {
            "statusCode":200,
            "body": "Hello, World!"
          }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref Api

  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${ProjectName}-api
      StageName: prod

  Domain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !FindInMap ["URLs", !Ref Environment, sslcert]
      DomainName: !FindInMap ["URLs", !Ref Environment, apidomain]

  Mapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref Domain
      RestApiId: !Ref Api