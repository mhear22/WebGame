AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  ProjectName:
    Type: String
    
  ProjectHash:
    Type: String
    
  Environment:
    Type: String

  DeploymentBucket:
    Type: String
    
Mappings:
  URLs:
    develop:
      apidomain: devapi.mckayhear.es
      root: mckayhear.es
      sslcert: arn:aws:acm:us-east-1:115136208505:certificate/d2ec0f01-f114-4d0b-ac04-c6ece55d0048
    production:
      apidomain: gameapi.mckayhear.es
      root: mckayhear.es
      sslcert: arn:aws:acm:us-east-1:115136208505:certificate/d2ec0f01-f114-4d0b-ac04-c6ece55d0048

Resources:
  StaticSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DeploymentBucket
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  StaticSitePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource:
              - !Sub ${StaticSiteBucket.Arn}/*
      Bucket: !Ref StaticSiteBucket

  StaticSiteRecordSets:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Forward to Environment
      HostedZoneName: !Sub
        - ${bucket}.
        - bucket: !FindInMap ["URLs", !Ref Environment, root]
      RecordSets:
        - Name: !Sub
            - ${bucket}.
            - bucket: !Ref DeploymentBucket
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt BucketCloudfront.DomainName
        - Name: !Sub
            - ${Domain}.
            - Domain: !FindInMap ["URLs", !Ref Environment, apidomain]
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt Domain.DistributionDomainName

  LambdaApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-${Environment}-backend-api
      Runtime: python3.7
      Handler: index.handler
      InlineCode: |
        def handler(_, __):
          return {
            "statusCode":200,
            "body": "Hello, World!"
          }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref Api

  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-api
      StageName: prod

  Domain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !FindInMap ["URLs", !Ref Environment, sslcert]
      DomainName: !FindInMap ["URLs", !Ref Environment, apidomain]

  Mapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref Domain
      RestApiId: !Ref Api

  BucketCloudfront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Sub ${DeploymentBucket}.s3.amazonaws.com
          Id: myS3Origin
          CustomOriginConfig:
            OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: myS3Origin
          AllowedMethods:
            - GET
            - OPTIONS
            - HEAD
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward : none
        Enabled: 'true'
        DefaultRootObject: index.html
        Aliases:
        - !Ref DeploymentBucket
        ViewerCertificate:
          MinimumProtocolVersion: TLSv1.2_2019
          AcmCertificateArn: !FindInMap ["URLs", !Ref Environment, sslcert]
          SslSupportMethod: sni-only
